#lang racket

(require "typing.rkt"
         redex/reduction-semantics)

(test-equal (term (typeof () 7))
            (term (∀ () num)))
(test-equal (term (typeof () (add1 (λ x x))))
            (term #f))

(test-equal (term (typeof () (ref 7)))
            (term (∀ () (ref num))))
(test-equal (term (typeof () (add1 (! (ref 7)))))
            (term (∀ () num)))
(test-equal (term (typeof () ((ref 7) := 8)))
            (term (∀ () num)))
(test-equal (term (typeof () ((ref 7) := (λ x x))))
            (term #f))
(test-equal (term (typeof () (seq ((ref 7) := 8) 9)))
            (term (∀ () num)))
(test-equal (term (typeof () (seq ((ref 7) := (λ x x)) 9)))
            (term #f))

(test-equal (term (typeof () (λ x x)))
            (term (∀ (x1) (x1 -> x1))))
(test-equal (term (typeof () (λ x (add1 x))))
            (term (∀ () (num -> num))))
(test-equal (term (typeof () (λ x ((add1 x) 0))))
            (term #f))

(test-equal (term (typeof () ((λ x (add1 x)) 7)))
            (term (∀ () num)))
(test-equal (term (typeof () (λ x ((λ x x) x))))
            (term (∀ (x2) (x2 -> x2))))
(test-equal (term (typeof () ((λ x (6 7)) 8)))
            (term #f))
(test-equal (term (typeof () ((λ x x) (7 8))))
            (term #f))
(test-equal (term (typeof () ((λ f (seq (f 7) (f (λ x x)))) (λ x x))))
            (term #f))

(test-equal (term (typeof () (let (x 7) (add1 x))))
            (term (∀ () num)))
(test-equal (term (typeof () (let (x (7 8)) x)))
            (term #f))
(test-equal (term (typeof () ((ref 0) := (let (T (1 2)) 3))))
            (term #f))
(test-equal (term (typeof () (let (x 7) (x 8))))
            (term #f))
(test-equal (term (typeof () (let (f (λ x x)) (seq (f f) (f 7)))))
            (term (∀ () num)))
(test-equal (term (typeof () (λ x (x x))))
            (term #f))
(test-equal (term (typeof () (λ x (let (f (x 0)) (add1 x)))))
            (term #f))
(test-equal (term (typeof () (((λ f (λ x (let (g f) (g (λ x x)))))
                               (λ x (add1 x)))
                              0)))
            (term #f))
(test-equal (term (typeof () (((λ f (λ x (let (g f) (g x))))
                               (λ x (add1 x)))
                              0)))
            (term (∀ () num)))
(test-equal (term (typeof () (λ r (λ x (r := x)))))
            (term (∀ (x2) ((ref x2) -> (x2 -> num)))))
(test-equal (term (typeof () (λ r (! r))))
            (term (∀ (x2) ((ref x2) -> x2))))
(test-equal (term (typeof ()
                          (let (c (λ a a))
                            (let (c 1)
                              (c 2)))))
            (term #f))
(test-equal (term (typeof () (λ f (let (x (f 3)) x))))
            (term (∀ (x2) ((num -> x2) -> x2))))

;; Uh oh!
(test-equal (term (typeof () (let (r (ref (λ x x)))
                               (seq (r := (λ y (λ x x)))
                                    (add1 ((! r) 2))))))
            (term (∀ () num)))

(test-equal (term (instantiate (x1 -> (x2 -> x6)) (x1 x2) (x1 x2 x3)))
            (term ((x4 -> (x5 -> x6)) (x1 x2 x3 x4 x5))))

(test-equal (term (TV ((x -> num) -> (num -> y))))
            (term (x y)))

(test-equal (term (subst-type (x -> (y -> x)) x num))
            (term (num -> (y -> num))))

(test-equal (term (subst-constraints ([x = num] [(num -> num) = x]) x num))
            (term ([num = num] [(num -> num) = num])))

(test-equal (term (unify ([x = x])))
            (term ()))
(test-equal (term (unify ([num = (num -> num)])))
            (term #f))
(test-equal (term (unify ([x = num])))
            (term ([x = num])))
(test-equal (term (unify ([num = x])))
            (term ([x = num])))
(test-equal (term (unify ([(x -> num) = ((num -> num) -> y)])))
            (term ([x = (num -> num)] [y = num])))
(test-equal (term (unify ([x = num] [x = y])))
            (term ([x = num] [y = num])))
(test-equal (term (unify ([x = num] [x = y] [y = (num -> num)])))
            (term #f))
(test-equal (term (unify ([x = (x -> num)])))
            (term #f))
(test-equal (term (unify ((x3 = x2) ((num -> num) = num))))
            (term #f))

;;; new tests
;;; for bugs found with prototype

(test-equal (term (typeof () ((ref (ref 0)) := (ref 0))))
            (term (∀ () (ref num))))

(test-results)